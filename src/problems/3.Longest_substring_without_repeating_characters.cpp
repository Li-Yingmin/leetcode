/*!
 * -------------------------------------------
 * Copyright (c) 2019, Horizon Robotics, Inc.
 * All rights reserved.
 * \File     3.Longest_substring_without_repeating_characters.cpp
 * \Author   Yingmin Li
 * \Mail     yingmin.li@horizon.ai
 * \Version  1.0.0.0
 * \Date     2019/12/30
 * \Brief    implement of 3.Longest_substring_without_repeating_characters.cpp
 * \DO NOT MODIFY THIS COMMENT, \
 * \WHICH IS AUTO GENERATED BY EDITOR
 * -------------------------------------------
 */

/*!
 * @brief Given a string, find the length of the longest substring without
repeating characters.
 * https://leetcode.com/problems/longest-substring-without-repeating-characters/
 */
#include <map>
#include <string>

#include "leetcode/leetcode.h"
namespace horizon {
namespace leetcode {
int Solution::lengthOfLongestSubstring(const std::string& s) {
  auto front = s.cbegin();
  auto back = s.cbegin();
  auto end = s.cend();
  int longest_str_chars = 0;
  std::map<char, int> char_counter = {};
  while ((back <= end) && (end - front >= longest_str_chars)) {
    if (back - front > longest_str_chars) {
      longest_str_chars = back - front;
    }
    if (++char_counter[*(back++)] > 1) {
      while (true) {
        char_counter[(*front)] = 0;
        if (*(front++) == *(back - 1)) {
          break;
        }
      }
      char_counter[*(back - 1)] = 1;
    }
  }
  return longest_str_chars;
}

}  // namespace leetcode
}  // namespace horizon
